Configurar la sincronizaci√≥n con rsync
En el servidor primario (donde los archivos se generan):


mkdir -p /home/weker/sync_folder  # Crear la carpeta de sincronizaci√≥n
En el servidor secundario (donde se replicar√°n los archivos):


mkdir -p /home/weker/sync_folder  # Crear la misma carpeta en el secundario
Ahora, en el servidor primario, ejecuta manualmente rsync para probar la sincronizaci√≥n:


rsync -avz /home/weker/sync_folder/ weker@IP_DEL_SECUNDARIO:/home/weker/sync_folder/
‚ö†Ô∏è Reemplaza IP_DEL_SECUNDARIO con la direcci√≥n IP del servidor secundario

Si esto funciona, puedes automatizarlo con cron.

2Ô∏è‚É£ Configurar la sincronizaci√≥n autom√°tica con cron
Edita el crontab en el servidor primario:


crontab -e
Agrega la siguiente l√≠nea para ejecutar rsync cada minuto:


* * * * * rsync -avz /home/weker/sync_folder/ weker@IP_DEL_SECUNDARIO:/home/weker/sync_folder/ > /home/weker/sync_log.txt 2>&1
Explicaci√≥n:

* * * * * ‚Üí Se ejecuta cada minuto
rsync -avz ‚Üí Sincroniza en modo archivos y subdirectorios
> /home/weker/sync_log.txt 2>&1 ‚Üí Guarda la salida en un archivo de log
Guarda y cierra el archivo.

3Ô∏è‚É£ Prueba si la sincronizaci√≥n funciona correctamente
En el servidor primario, crea un archivo de prueba:


touch /home/weker/sync_folder/test_file.txt
Espera un minuto y revisa en el servidor secundario:


ls -l /home/weker/sync_folder/
Si el archivo aparece en el secundario, la sincronizaci√≥n funciona correctamente. üöÄ

4Ô∏è‚É£ Verificaci√≥n de cron si hay problemas
Si el archivo no aparece en el secundario, revisa el log de cron en el servidor primario:

sudo tail -f /var/log/cron
Si cron no est√° funcionando, intenta reiniciarlo:


sudo systemctl restart crond
sudo systemctl enable crond
Cluster de Alta Disponibilidad HTTP. comando.
 Instalar Apache en ambos servidores

sudo dnf install httpd -y
2. Habilitar y arrancar el servicio Apache

sudo systemctl enable --now httpd
3. Crear la p√°gina web en cada servidor
En server1:


echo "<h1>Este es el servidor 1</h1>" | sudo tee /var/www/html/index.html
En server2:

echo "<h1>Este es el servidor 2</h1>" | sudo tee /var/www/html/index.html

4. Ajustar el firewall
sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --reload

5. Instalar Keepalived en ambos servidores
sudo dnf install keepalived -y

6. Configurar Keepalived en server1 (/etc/keepalived/keepalived.conf)
sudo nano /etc/keepalived/keepalived.conf
A√±adir la siguiente configuraci√≥n en server1:
vrrp_instance VI_1 {
    state MASTER
    interface ens33
    virtual_router_id 51
    priority 150
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 12345
    }
    virtual_ipaddress {
        192.168.1.200/24
    }
}
7. Configurar Keepalived en server2 (/etc/keepalived/keepalived.conf)
sudo nano /etc/keepalived/keepalived.conf
A√±adir la siguiente configuraci√≥n en server2:

vrrp_instance VI_1 {
    state BACKUP
    interface ens33
    virtual_router_id 51
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 12345
    }
    virtual_ipaddress {
        192.168.1.200/24
    }
}
8. Habilitar y arrancar Keepalived en ambos servidores
sudo systemctl enable --now keepalived

9. Verificar la IP flotante en el servidor MASTER
ip a | grep 192.168.1.200

10. Validar la alta disponibilidad
Acceder a http://192.168.1.200 desde un navegador.
Apagar server1 (sudo poweroff) y probar nuevamente.
Verificar que server2 asume la IP flotante:

ip a | grep 192.168.1.200
